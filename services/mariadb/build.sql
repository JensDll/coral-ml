--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.636.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 16/07/2021 09:20:01
-- Server version: 10.6.3
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

DROP DATABASE IF EXISTS RecordDb;

CREATE DATABASE RecordDb
CHARACTER SET utf8mb4
COLLATE utf8mb4_general_ci;

--
-- Set default database
--
USE RecordDb;

--
-- Create table `RecordType`
--
CREATE TABLE RecordType (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  recordType varchar(200) NOT NULL DEFAULT '',
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 4,
AVG_ROW_LENGTH = 8192,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create table `Record`
--
CREATE TABLE Record (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  modelFileName varchar(200) NOT NULL,
  labelFileName varchar(200) NOT NULL,
  zipContent longblob NOT NULL,
  recordTypeId int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 7,
AVG_ROW_LENGTH = 1927850,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE Record
ADD CONSTRAINT FK__Record__recordTypeId__RecordType_id FOREIGN KEY (recordTypeId)
REFERENCES RecordType (id) ON DELETE NO ACTION;

DELIMITER $$

--
-- Create procedure `spRecord_GetById`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_GetById (IN param_id int)
BEGIN
  SELECT
    JSON_OBJECT(
    'id', r.id,
    'modelFileName', r.modelFileName,
    'labelFileName', r.labelFileName,
    'recordTypeId', r.recordTypeId,
    'recordType', rt.recordType
    )
  FROM Record r
    INNER JOIN RecordType rt
      ON r.recordTypeId = rt.id
  WHERE r.id = param_id;
END
$$

--
-- Create procedure `spRecord_Download`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_Download (IN param_id int)
BEGIN
  SELECT
    zipContent
  FROM Record r
  WHERE r.id = param_id;
END
$$

--
-- Create procedure `spRecord_Delete`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_Delete (IN param_id int)
BEGIN
  DELETE
    FROM Record
  WHERE id = param_id;
END
$$

--
-- Create procedure `spRecord_Create`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_Create (IN param_modelFileName varchar(200),
IN param_LabelFileName varchar(200),
IN param_zipContent longblob,
IN param_recordTypeId int(11))
BEGIN
  INSERT INTO Record (modelFileName,
  labelFileName,
  zipContent,
  recordTypeId)
    VALUES (param_modelFileName, param_LabelFileName, param_zipContent, param_recordTypeId);

  SELECT
    LAST_INSERT_ID();
END
$$

DELIMITER ;

--
-- Create table `LoadedRecord`
--
CREATE TABLE LoadedRecord (
  id int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  recordId int(11) UNSIGNED NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 3,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE LoadedRecord
ADD CONSTRAINT FK__LoadedRecord__recordId__Record__id FOREIGN KEY (recordId)
REFERENCES Record (id) ON DELETE CASCADE ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create function `GetLoadedRecordTypeId`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION GetLoadedRecordTypeId ()
RETURNS int(11)
BEGIN
  SELECT
    r.recordTypeId INTO @loadedRecordTypeId
  FROM LoadedRecord lr
    INNER JOIN Record r
      ON lr.recordId = r.id;

  RETURN @loadedRecordTypeId;
END
$$

--
-- Create procedure `spRecordType_GetAll`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecordType_GetAll ()
BEGIN
  CREATE TEMPORARY TABLE count_table (
    recordTypeId int,
    total int
  );

  INSERT INTO count_table
    SELECT
      rt.id,
      COUNT(r.id)
    FROM Record r
      RIGHT OUTER JOIN RecordType rt
        ON rt.id = r.recordTypeId
    GROUP BY rt.id;

  SET @loadedRecordTypeId := GetLoadedRecordTypeId();

  CREATE TEMPORARY TABLE tmp_result (
    id int,
    recordType varchar(200),
    total int,
    loaded bool
  );

  INSERT INTO tmp_result
    SELECT
      rt.id,
      rt.recordType,
      ct.total,
      rt.id = @loadedRecordTypeId
    FROM RecordType rt
      INNER JOIN count_table ct
        ON rt.id = ct.recordTypeId;

  SELECT
    *
  FROM tmp_result tr
  ORDER BY tr.loaded DESC;
END
$$

--
-- Create function `GetLoadedRecordId`
--
CREATE
DEFINER = 'root'@'%'
FUNCTION GetLoadedRecordId ()
RETURNS int(11)
BEGIN
  SELECT
    lr.recordId INTO @loadedRecordId
  FROM LoadedRecord lr;

  RETURN @loadedRecordId;
END
$$

--
-- Create procedure `spRecord_GetWithRecordTypeId`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_GetWithRecordTypeId (IN param_skip int, IN param_take int, IN param_recordTypeId int, OUT param_total int)
BEGIN
  SET @loadedRecordId := GetLoadedRecordId();

  CREATE TEMPORARY TABLE tmp_result (
    id int,
    modelFileName varchar(200),
    labelFileName varchar(200),
    recordTypeId int,
    loaded bool
  );

  INSERT INTO tmp_result
    SELECT
      r.id,
      r.modelFileName,
      r.labelFileName,
      r.recordTypeId,
      @loadedRecordId = r.id
    FROM Record r;

  SELECT
    tr.*,
    rt.recordType
  FROM tmp_result tr
    INNER JOIN RecordType rt
      ON tr.recordTypeId = rt.id
  WHERE param_recordTypeId = tr.recordTypeId
  ORDER BY tr.loaded DESC
  LIMIT param_skip, param_take;

  SELECT
    COUNT(*) INTO param_total
  FROM Record r
  WHERE r.recordTypeId = param_recordTypeId;
END
$$

--
-- Create procedure `spRecord_SetLoaded`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_SetLoaded (IN param_recordId int)
BEGIN
  DECLARE loaded_record_id int;

  SELECT
    lr.id INTO loaded_record_id
  FROM LoadedRecord lr;

  IF loaded_record_id IS NULL THEN
    INSERT INTO LoadedRecord (recordId)
      VALUES (param_recordId);
  ELSE
    UPDATE LoadedRecord lr
    SET lr.recordId = param_recordId;
  END IF;
END
$$

--
-- Create procedure `spRecord_GetLoaded`
--
CREATE
DEFINER = 'root'@'%'
PROCEDURE spRecord_GetLoaded ()
BEGIN
  SELECT
    JSON_OBJECT(
    'id', r.id,
    'modelFileName', r.modelFileName,
    'labelFileName', r.labelFileName,
    'recordTypeId', r.recordTypeId,
    'recordType', rt.recordType
    )
  FROM LoadedRecord lr
    INNER JOIN Record r
      ON lr.recordId = r.id
    INNER JOIN RecordType rt
      ON r.recordTypeId = rt.id;
END
$$

DELIMITER ;

-- 
-- Dumping data for table RecordType
--
INSERT INTO RecordType VALUES
(1, 'Image Classification'),
(2, 'Object Detection');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;